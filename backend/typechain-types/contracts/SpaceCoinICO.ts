/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface SpaceCoinICOInterface extends utils.Interface {
  functions: {
    "ICOPhase()": FunctionFragment;
    "addToWhitelist(address[])": FunctionFragment;
    "advanceICOPhase(uint8)": FunctionFragment;
    "contribute()": FunctionFragment;
    "redeemTokens()": FunctionFragment;
    "reedeemableContributions(address)": FunctionFragment;
    "seedWhitelist(address)": FunctionFragment;
    "setSpaceCoinAddress(address)": FunctionFragment;
    "toggleAllowContributions()": FunctionFragment;
    "totalContributed()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ICOPhase"
      | "addToWhitelist"
      | "advanceICOPhase"
      | "contribute"
      | "redeemTokens"
      | "reedeemableContributions"
      | "seedWhitelist"
      | "setSpaceCoinAddress"
      | "toggleAllowContributions"
      | "totalContributed"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ICOPhase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "advanceICOPhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reedeemableContributions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "seedWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpaceCoinAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleAllowContributions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalContributed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ICOPhase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advanceICOPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reedeemableContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seedWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpaceCoinAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleAllowContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalContributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Contribution(address,uint256,uint8,uint256)": EventFragment;
    "PhaseAdvance(uint8)": EventFragment;
    "ReedemTokens(address,uint256)": EventFragment;
    "WhitelistedAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Contribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseAdvance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReedemTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedAddress"): EventFragment;
}

export interface ContributionEventObject {
  addr: string;
  amount: BigNumber;
  ICOPhase: number;
  totalContributed: BigNumber;
}
export type ContributionEvent = TypedEvent<
  [string, BigNumber, number, BigNumber],
  ContributionEventObject
>;

export type ContributionEventFilter = TypedEventFilter<ContributionEvent>;

export interface PhaseAdvanceEventObject {
  ICOPhase: number;
}
export type PhaseAdvanceEvent = TypedEvent<[number], PhaseAdvanceEventObject>;

export type PhaseAdvanceEventFilter = TypedEventFilter<PhaseAdvanceEvent>;

export interface ReedemTokensEventObject {
  addr: string;
  tokens: BigNumber;
}
export type ReedemTokensEvent = TypedEvent<
  [string, BigNumber],
  ReedemTokensEventObject
>;

export type ReedemTokensEventFilter = TypedEventFilter<ReedemTokensEvent>;

export interface WhitelistedAddressEventObject {
  addr: string;
}
export type WhitelistedAddressEvent = TypedEvent<
  [string],
  WhitelistedAddressEventObject
>;

export type WhitelistedAddressEventFilter =
  TypedEventFilter<WhitelistedAddressEvent>;

export interface SpaceCoinICO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpaceCoinICOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ICOPhase(overrides?: CallOverrides): Promise<[number]>;

    addToWhitelist(
      _whitelistedAddress: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    advanceICOPhase(
      phase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reedeemableContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    seedWhitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    setSpaceCoinAddress(
      _spaceCoinAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleAllowContributions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalContributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ICOPhase(overrides?: CallOverrides): Promise<number>;

  addToWhitelist(
    _whitelistedAddress: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  advanceICOPhase(
    phase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contribute(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reedeemableContributions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  seedWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  setSpaceCoinAddress(
    _spaceCoinAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleAllowContributions(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalContributed(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ICOPhase(overrides?: CallOverrides): Promise<number>;

    addToWhitelist(
      _whitelistedAddress: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    advanceICOPhase(
      phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contribute(overrides?: CallOverrides): Promise<void>;

    redeemTokens(overrides?: CallOverrides): Promise<void>;

    reedeemableContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seedWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    setSpaceCoinAddress(
      _spaceCoinAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleAllowContributions(overrides?: CallOverrides): Promise<void>;

    totalContributed(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Contribution(address,uint256,uint8,uint256)"(
      addr?: string | null,
      amount?: null,
      ICOPhase?: null,
      totalContributed?: null
    ): ContributionEventFilter;
    Contribution(
      addr?: string | null,
      amount?: null,
      ICOPhase?: null,
      totalContributed?: null
    ): ContributionEventFilter;

    "PhaseAdvance(uint8)"(ICOPhase?: null): PhaseAdvanceEventFilter;
    PhaseAdvance(ICOPhase?: null): PhaseAdvanceEventFilter;

    "ReedemTokens(address,uint256)"(
      addr?: string | null,
      tokens?: null
    ): ReedemTokensEventFilter;
    ReedemTokens(addr?: string | null, tokens?: null): ReedemTokensEventFilter;

    "WhitelistedAddress(address)"(
      addr?: string | null
    ): WhitelistedAddressEventFilter;
    WhitelistedAddress(addr?: string | null): WhitelistedAddressEventFilter;
  };

  estimateGas: {
    ICOPhase(overrides?: CallOverrides): Promise<BigNumber>;

    addToWhitelist(
      _whitelistedAddress: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    advanceICOPhase(
      phase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reedeemableContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    seedWhitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setSpaceCoinAddress(
      _spaceCoinAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleAllowContributions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalContributed(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ICOPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToWhitelist(
      _whitelistedAddress: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    advanceICOPhase(
      phase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contribute(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reedeemableContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    seedWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSpaceCoinAddress(
      _spaceCoinAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleAllowContributions(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalContributed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
